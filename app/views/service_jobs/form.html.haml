- service_job = @service_job.decorate
= auto_header_tag @service_job

.row-fluid
  .span6
    = simple_form_for @service_job, html: { class: 'form-horizontal service_job_form' } do |f|

      - if @service_job.errors.any?
        .alert.alert-danger= @service_job.errors.full_messages.join '. '

      = f.full_error :ticket_number

      - if can? :update, @service_job
        = f.input :client, as: :client, wrapper_html: {id: 'client_fields'}
      - else
        = f.input :client, as: :string, disabled: true, input_html: {class: 'input-xlarge'}

      = f.input :contact_phone, as: :contact_phone
      - if @service_job.persisted? and @service_job.client.contact_phone.present?
        .control-group
          = label_tag 'contact_phone', Client.human_attribute_name(:contact_phone), class: 'control-label'
          .controls
            = text_field_tag 'contact_phone', human_phone(@service_job.client.contact_phone), class: 'input-medium', disabled: true

      = f.input :security_code, as: :security_code

      - if can? :update, @service_job
        - if @service_job.new_record? || @service_job.item.present?
          = f.input :item, as: :device, required: true
        - else
          = f.input :device_type, as: :device_type
          = f.input :serial_number, as: :serial_number, input_html: {autocomplete: 'off'}, required: true
          = f.input :imei, as: :imei, wrapper_html: {class: @service_job.has_imei? ? 'imei_input' : 'imei_input hidden'}
          = f.hidden_field :item_id
      - else
        - if @service_job.item.present?
          = service_job.device
        - else
          .control-group
            %label.control-label= ServiceJob.human_attribute_name(:device_type)
            .controls= service_job.device_name

          .control-group
            %label.control-label= ServiceJob.human_attribute_name(:serial_number)
            .controls= service_job.serial_number

          .control-group
            %label.control-label= ServiceJob.human_attribute_name(:imei)
            .controls= service_job.imei

      - if @service_job.new_record? or @service_job.user_id == current_user.id
        = f.input :app_store_pass, required: @service_job.new_record?

      = f.input :is_tray_present, as: :radio_buttons, required: true,
        wrapper_html: {class: "tray_input#{' hidden' unless @service_job.has_imei?}"}

      = f.association :carrier, as: :radio_buttons, collection: Carrier.all, required: true,
        wrapper_html: {class: "carrier_input#{' hidden' unless @service_job.has_imei?}"}

      = f.association :case_color, as: :dropdown, collection: CaseColor.ordered_by_name, label_method: lambda{|c|case_color_presentation(c)}

      = f.input :data_storages, as: :data_storage

      = f.input :comment, input_html: {rows: 5}, disabled: !can?(:update, @service_job)

      = f.input :tech_notice, input_html: {rows: 5} if can? :write_tech_notice, @service_job

      #additional-fields
        -# TODO: make input for fields with templates
        = f.input :client_address, label_html: {class: 'important'}, input_html: {class: 'input-xlarge'}
        = f.input :trademark, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('trademark', @job_templates)}
        = f.input :device_group, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('device_group', @job_templates)}
        = f.input :completeness, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('completeness', @job_templates)}
        = f.input :claimed_defect, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('claimed_defect', @job_templates)}
        = f.input :device_condition, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('device_condition', @job_templates)}
        = f.input :client_comment, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('client_comment', @job_templates)}
        = f.input :type_of_work, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('type_of_work', @job_templates)}
        = f.input :estimated_cost_of_repair, label_html: {class: 'important'}, input_html: {class: 'input-xlarge has-templates', data: service_job_template_field_data('estimated_cost_of_repair', @job_templates)}

        #service-job_templates

      = f.input :notify_client if @service_job.new_record? or current_user.any_admin?
      = f.input :client_notified, as: :radio_buttons, collection: [[true, t('yep')], [false, t('not_accessible')]], required: true, value_method: :first, label_method: :last if @service_job.notify_client?

      = f.input :email, hint: t('.email_hint')

      - if can?(:update, @service_job) || current_user.able_to_move_transfers?
        = f.input :location_id, as: :location
      - else
        = f.input :location, as: :string, disabled: true, input_html: {class: 'input-xlarge'}

      = f.input :return_at, as: :datetime_quick_select

      = f.input :substitute_phone, as: :substitute_phone

      - if @available_check_lists.any?
        %hr
        %h4 Чек-листы

        - @available_check_lists.each_with_index do |check_list, index|
          - response = @check_list_responses_hash[check_list.id]
          .control-group
            %label.control-label= check_list.name
            .controls
              = hidden_field_tag "service_job[check_list_responses_attributes][#{index}][check_list_id]", check_list.id
              - if response.persisted?
                = hidden_field_tag "service_job[check_list_responses_attributes][#{index}][id]", response.id

              - check_list_items_for(check_list).each do |item|
                .checkbox
                  %label
                    = check_box_tag "service_job[check_list_responses_attributes][#{index}][responses][#{item.id}]",
                                    "true",
                                    response_for_item(response, item),
                                    id: "service_job_check_list_responses_attributes_#{index}_responses_#{item.id}"
                    = item.question
                    - if item.required?
                      %span.required *

      -# = f.input :photo_container, as: :photo_container
      %hr
      = render 'task_templates'

      -if f.error(:device_tasks).present?
        .control-group.required.error
          .controls
            %p= f.full_error :device_tasks, class: 'text-error'
            %p
              %span.help-inline.text-error= f.object.device_tasks.map{|dt|dt.errors.full_messages}.join ', '

      = render @service_job.new_record? ? 'device_tasks_fields' : 'device_tasks', f: f

      .form-actions
        = submit_button f

  .span6
    = secondary_form_container
    #device_notes_container= render 'device_notes', editable: true if @service_job.persisted?
